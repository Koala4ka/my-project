### NoDocs ###
GET     /                       controllers.HomeController.index

###
#tags:
#- Test
#summary: Hello
#operationId: Hello
#produces:
#- text/plain
#parameters:
#- in: query
#  name: name
#responses:
#  '200':
#    description: success
#  '500':
#    description: Internal server error
###
GET     /hello                      controllers.HomeController.hello(name: String ?= "world")

########################################################################################################################
##################################################### E M P L O Y E E R ##########################################################
########################################################################################################################

###
#  summary: Create Goal
#  tags:
#    - Employeer
#  security:
#    - AuthToken: []
#  consumes: application/json
#  produces:
#    - text/plain
#  parameters:
#    - in: body
#      name: createGoal
#      required: true
#      schema:
#        "$ref": "#/definitions/models.dtos.question.CreateGoalForm"
#  responses:
#    200:
#      description: success
#    401:
#      description: Unauthorized
#    404:
#      description: Not found
#    422:
#      description: Wrong json
#    500:
#      description: Internal server error
###
PUT    /goal                    controllers.EmployeeController.createGoal(organizationId:Option[Long])

########################################################################################################################
##################################################### U S E R ##########################################################
########################################################################################################################

###
#  summary: Get all users
#  tags:
#    - User
#  security:
#    - AuthToken: []
#  produces:
#    - application/json
#  responses:
#    200:
#      description: success
#    401:
#      description: Unauthorized
#    500:
#      description: Internal server error
###
GET    /user/all                  controllers.UserController.getAll(organizationId:Option[Long])


###
#  summary: Update user
#  tags:
#    - User
#  security:
#    - AuthToken: []
#  consumes: application/json
#  produces:
#    - text/plain
#  parameters:
#    - in: body
#      name: UserDTO
#      required: true
#      schema:
#        "$ref": "#/definitions/models.dtos.question.UserUpdateQuestion"
#  responses:
#    200:
#      description: success
#    401:
#      description: Unauthorized
#    404:
#      description: Not found
#    422:
#      description: Wrong json
#    500:
#      description: Internal server error
###
PUT    /user                    controllers.UserController.updateUser(organizationId:Option[Long])

########################################################################################################################
##################################################### A U T H ##########################################################
########################################################################################################################


###
#  tags:
#    - Auth
#  summary: SignIn
#  operationId: SignIn
#  consumes: application/json
#  produces:
#    - application/json
#  parameters:
#    - in: body
#      name: Credentials
#      required: true
#      schema:
#        "$ref": "#/definitions/models.dtos.question.Credentials"
#  responses:
#    '200':
#      description: success
#      schema:
#        "$ref": "#/definitions/models.dtos.answers.SignInEmailAnswerDTO"
###
POST    /api/auth/auth/signin                       controllers.AuthController.signIn

###
#  summary: Description
#  tags:
#    - Auth
#  security:
#    - AuthToken: []
#  parameters:
#    - name: body
#      schema:
#        "$ref": "#/definitions/models.dtos.question.SignUpForm"
#  responses:
#    200:
#      description: success
###
POST    /auth/signup                  controllers.AuthController.signUp(organizationId:Option[Long])

### NoDocs ###
GET     /docs/swagger-ui/*file       controllers.Assets.at(path:String="/public/lib/swagger-ui", file:String)


# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)



